// -- Model dump before bytecode pipeline
module 0x42::mathtest {
} // end 0x42::mathtest
module 0x42::mathtest2 {
    use 0x42::mathtest; // resolved as: 0x42::mathtest
} // end 0x42::mathtest2
module 0x42::mathtest3 {
    use 0x42::mathtest2; // resolved as: 0x42::mathtest2
} // end 0x42::mathtest3
module 0x42::test {
    use 0x42::mathtest; // resolved as: 0x42::mathtest
    use 0x42::mathtest2; // resolved as: 0x42::mathtest2
    use 0x42::mathtest3; // resolved as: 0x42::mathtest3
    private fun test_nested_mul_div() {
        {
          let a: u64 = {
            let (a: u64, b: u64, c: u64) = Tuple({
              let (a: u64, b: u64, c: u64) = Tuple(1, 1, 1);
              {
                let (a: u64, b: u64, c: u64) = Tuple(b, a, c);
                {
                  let (a: u64, b: u64, c: u64) = Tuple(b, a, c);
                  Cast(Div<u128>(Mul<u128>(Cast(a), Cast(b)), Cast(c)))
                }
              }
            }, {
              let (a: u64, b: u64, c: u64) = Tuple(1, 1, 1);
              Cast(Div<u128>(Mul<u128>(Cast(a), Cast(b)), Cast(c)))
            }, {
              let (a: u64, b: u64, c: u64) = Tuple(1, 1, 1);
              {
                let (a: u64, b: u64, c: u64) = Tuple(b, a, c);
                Cast(Div<u128>(Mul<u128>(Cast(a), Cast(b)), Cast(c)))
              }
            });
            Cast(Div<u128>(Mul<u128>(Cast(a), Cast(b)), Cast(c)))
          };
          if Eq<u64>(a, 1) {
            Tuple()
          } else {
            Abort(0)
          };
          Tuple()
        }
    }
} // end 0x42::test
