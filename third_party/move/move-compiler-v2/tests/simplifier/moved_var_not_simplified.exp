// -- Model dump before env processor pipeline:
module 0xc0ffee::m {
    public fun test(): u8 {
        {
          let x: u8 = 40;
          {
            let y: u8 = Move(x);
            Add<u8>(x, y)
          }
        }
    }
    spec fun $test(): u8 {
        {
          let x: u256 = 40;
          {
            let y: u256 = Move(x);
            Add(x, y)
          }
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor unused checks:
module 0xc0ffee::m {
    public fun test(): u8 {
        {
          let x: u8 = 40;
          {
            let y: u8 = Move(x);
            Add<u8>(x, y)
          }
        }
    }
    spec fun $test(): u8 {
        {
          let x: u256 = 40;
          {
            let y: u256 = Move(x);
            Add(x, y)
          }
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor type parameter check:
module 0xc0ffee::m {
    public fun test(): u8 {
        {
          let x: u8 = 40;
          {
            let y: u8 = Move(x);
            Add<u8>(x, y)
          }
        }
    }
    spec fun $test(): u8 {
        {
          let x: u256 = 40;
          {
            let y: u256 = Move(x);
            Add(x, y)
          }
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor access and use check before inlining:
module 0xc0ffee::m {
    public fun test(): u8 {
        {
          let x: u8 = 40;
          {
            let y: u8 = Move(x);
            Add<u8>(x, y)
          }
        }
    }
    spec fun $test(): u8 {
        {
          let x: u256 = 40;
          {
            let y: u256 = Move(x);
            Add(x, y)
          }
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor inlining:
module 0xc0ffee::m {
    public fun test(): u8 {
        {
          let x: u8 = 40;
          {
            let y: u8 = Move(x);
            Add<u8>(x, y)
          }
        }
    }
    spec fun $test(): u8 {
        {
          let x: u256 = 40;
          {
            let y: u256 = Move(x);
            Add(x, y)
          }
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor access and use check after inlining:
module 0xc0ffee::m {
    public fun test(): u8 {
        {
          let x: u8 = 40;
          {
            let y: u8 = Move(x);
            Add<u8>(x, y)
          }
        }
    }
    spec fun $test(): u8 {
        {
          let x: u256 = 40;
          {
            let y: u256 = Move(x);
            Add(x, y)
          }
        }
    }
} // end 0xc0ffee::m


// -- Model dump after env processor simplifier:
module 0xc0ffee::m {
    public fun test(): u8 {
        {
          let x: u8 = 40;
          {
            let y: u8 = Move(x);
            Add<u8>(x, y)
          }
        }
    }
    spec fun $test(): u8 {
        {
          let x: u256 = 40;
          {
            let y: u256 = Move(x);
            Add(x, y)
          }
        }
    }
} // end 0xc0ffee::m



Diagnostics:
error: cannot move local `x` since it is still in use
  ┌─ tests/simplifier/move_check.move:4:17
  │
4 │         let y = move x;
  │                 ^^^^^^ attempted to move here
5 │         x + y
  │         ----- used here
